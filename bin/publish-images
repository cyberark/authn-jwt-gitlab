#!/usr/bin/env bash
set -euo pipefail

cd "$(dirname "$0")"

. ./build_utils

# Publishes the 'authn-jwt-gitlab' image to docker registries
# There are 3 primary flows:
# - Publish build-specific (commit SHA) based images internally
# - Publish edge and release builds images internally and to DockerHub
# - Promote an existing image to a customer release and publish to latest
#
# If no parameters are specified, no images are pushed
function print_help() {
  echo "Usage: $0 [OPTION...] <version>"
  echo " internal: publish SHA tagged images internally"
  echo " edge: publish images as edge versions to registry.tld and dockerhub"
  echo " promote: publish images as a promotion (latest and less specific versions) to registry.tld and dockerhub"
  echo " redhat: publish image to redhat registry"
  echo " version=VERSION: specify version number to use"
  echo " base-version=VERSION: specify base image version number to use to apply tags to"
  echo " target: target"
}

PUBLISH_EDGE=false
PUBLISH_INTERNAL=false
PROMOTE=false
REDHAT=false
DOCKERHUB=false
VERSION=$(<VERSION)

LOCAL_TAG="$(version_tag)"

for arg in "$@"; do
  case $arg in
    internal )
      PUBLISH_INTERNAL=true
      shift
      ;;
    edge )
      PUBLISH_EDGE=true
      shift
      ;;
    promote )
      PROMOTE=true
      shift
      ;;
    dockerhub )
      DOCKERHUB=true
      shift
      ;;
    --redhat )
      REDHAT=true
      shift
      ;;
    version=* )
      VERSION="${arg#*=}"
      shift
      ;;
    base-version=* )
      LOCAL_TAG="${arg#*=}"
      shift
      ;;
    * )
      echo "Unknown option: ${arg}"
      print_help
      exit 1
      ;;
    esac
done

echo " Check the Local Tag value :- ${LOCAL_TAG}"

# IMAGE_NAME="cyberark/authn-jwt-gitlab"

  Stringval="ubuntu alpine ubi"
  for target in $Stringval; do
    LOCAL_IMAGE="authn-jwt-gitlab:${target}$(project_version_with_commit)"

    # Normalize version number in the case of '+' included
    VERSION="$(echo -n "${VERSION}" | tr "+" "_")"

    # Don't publish to DockerHub unless the build is in the main authn-jwt-gitlab repo
    if [[ "${JOB_NAME}" != cyberark--authn-jwt-gitlab/* ]];
    then
      DOCKERHUB=false
    fi

    # Only push SHA images on internal
    if [[ "${PUBLISH_INTERNAL}" = true ]]; then
      echo "Pushing ${LOCAL_IMAGE} tagged images to registry.tld..."
      # Always push SHA versioned images internally
      tag_and_push "${LOCAL_IMAGE}" "registry.tld/authn-jwt-gitlab:${target}$(project_version_with_commit)"   # authn-jwt-gitlab:1.0.0-e917482

    fi
  done

#  ========== To Do =============
# if [[ "${PUBLISH_EDGE}" = true ]]; then
#   echo "Pushing edge versions..."

#   # Publish release specific versions internally
#   echo "Pushing ${VERSION} to registry.tld..."
#   tag_and_push "${VERSION}" "${LOCAL_IMAGE}" "registry.tld/${IMAGE_NAME}"
#   tag_and_push "${VERSION}" "${RH_LOCAL_IMAGE}" "registry.tld/authn-jwt-gitlab-ubi"

#   # Push image to internal registry
#   tag_and_push "edge" "${LOCAL_IMAGE}" "registry.tld/${IMAGE_NAME}"
#   tag_and_push "edge" "${RH_LOCAL_IMAGE}" "registry.tld/authn-jwt-gitlab-ubi"

#   # Publish release specific and edge tags to dockerhub
#   if [[ "${DOCKERHUB}" = true ]]; then
#     tag_and_push "${VERSION}" "${LOCAL_IMAGE}" "${IMAGE_NAME}"
#     tag_and_push "edge" "${LOCAL_IMAGE}" "${IMAGE_NAME}"
#   fi
# fi

#  ========== To Do =============
# if [[ "${PROMOTE}" = true ]]; then
#   echo "Promoting image to ${VERSION}"

#   # Push latest, 1.x.y, 1.x, and 1 images
#   readarray -t prefix_versions < <(gen_versions "${VERSION}")

#   for version in latest "${prefix_versions[@]}"; do
#     tag_and_push "${VERSION}" "${LOCAL_IMAGE}" "registry.tld/${IMAGE_NAME}"
#     tag_and_push "${VERSION}" "${RH_LOCAL_IMAGE}" "registry.tld/authn-jwt-gitlab-ubi"

#     if [[ "${DOCKERHUB}" ]]; then
#       tag_and_push "${VERSION}" "${LOCAL_IMAGE}" "${IMAGE_NAME}"
#     fi
#   done
# fi

#  ========== To Do =============
# if [[ "${REDHAT}" = true ]]; then
#   echo "Publishing ${VERSION} to RedHat registry..."
#   # Publish only the tag version to the Redhat container registry
#   if docker login "${REDHAT_REGISTRY}" -u "${REDHAT_USER}" -p "${REDHAT_API_KEY}"; then
#     # push image to red hat
#     tag_and_push "${VERSION}" "${RH_LOCAL_IMAGE}" "${REDHAT_REMOTE_IMAGE}"

#     # scan image with preflight tool
#     scan_redhat_image "${REDHAT_REMOTE_IMAGE}:${VERSION}" "${REDHAT_CERT_PID}"
#   else
#     echo 'Failed to log in to quay.io'
#     exit 1
#   fi
# fi
